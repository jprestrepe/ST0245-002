public class Estudiante {

    String[] estudiante;

    // public ArrayList<String[]>estudiantes;
    public Estudiante(String[] base) {
        this.estudiante = base;
    }

    public void setEstudiante(String[] estudiante) {
        this.estudiante = estudiante;
        // estudiantes.add(estudiante);
    }

    public String[] getEstudiante() {
        return estudiante;
    }

}
















/**
*Clase ColeccionDatos.
*En esta clase se crea y almacena una colección de datos.
*Se maneja un ArrayList.
*@Restrepo y Sanchez.
*@Agosto/2020
*/
import java.io.*;
import java.util.*;
import javax.swing.JOptionPane;

public class ColeccionDatos {
    float giniPonderado;
    int contador = 0;// hará el trabajo de contar las filas que hay en el .txt
    int columnas = 0;// contará cuantos datos hay por estudiante
    Object[][] arreglo;
    String[] tmpColumn;
    double[] contenedorDDatos;//sirve para contener los datos de la columna deseada y calcular el gini ponderado
    public ArrayList<String[]> estudiantes;

    // crear un arreglo con n numero de filas(las que lea)
    // y con m columnas(las que lea x2)
    public ColeccionDatos() {
        estudiantes = new ArrayList<>();
    }

    /*
     * este metodo funciona para leer y definir el tamaño del arreglo
     */
    protected void LecturaArchivo(String Archivo) throws FileNotFoundException {
        Scanner Dato0 = new Scanner(new File(Archivo));
        String aux;
        String aux2;
        while (Dato0.hasNextLine()) {
            String line = Dato0.nextLine();
            line = line.replace(" ", "");
            line = line.replace(";;", ";vacio;");
            line = line.replace(";;", ";vacio;");
            line = line.replace(";", " ");
            Scanner lineScan = new Scanner(line);
            if (contador == 0) {
                do {
                    columnas++;
                    aux = lineScan.next();
                } while (lineScan.hasNext());
            }
            tmpColumn = new String[columnas];
            int i = 0;
            if (contador > 0) {
                do {
                    aux2 = lineScan.next();
                    tmpColumn[i] = aux2;
                    i++;
                } while (lineScan.hasNext());
                Estudiante cd = new Estudiante(tmpColumn);
                estudiantes.add(tmpColumn);
            }
            contador++;
            lineScan.close();

        }
        arreglo = new String[contador - 1][columnas];// contador][columnas];
        for (int i = 0; i < contador - 1; i++) {
            arreglo[i] = estudiantes.get(i);
        }
        contador = contador - 1;
        System.out.println("Fueron encontrados: " + contador + " estudiantes de manera correcta, y cada uno tiene: "
                + columnas + " datos");
        Dato0.close();
    }














import java.util.*;
import java.io.*;
import java.util.ArrayList;

public class menu22{
    private ArrayList<Dato2>da;
    private Scanner sc;
    private ColeccionDatos cd;
    String pre = "Ingrese el numero ";
    String ac = " para: ";

    String total = pre + "1" + ac + "buscar y leer un archivo o fichero\n" + pre + "2" + ac
            + "mostrar en pantalla el número de datos en la colección\n" + pre + "3" + ac + "ver menú nuevamente\n"
            + pre + "0" + ac + "cerrar el programa.\n";

    /**
     * Constructor menu. Se crean instancias de colecciones a usar en la clase
     */
    public menu22() {
        cd = new ColeccionDatos();
        da = new ArrayList<>();
        sc = new Scanner(System.in);
    }

    /**
     * Método menu1. Este método tiene las opciones que el programa ofrece al
     * usuario por medio del System.out.println() se muestra en pantalla dichas
     * posibilidades El Método retorna la opción digitada por el usuario
     */
    public int menu1() {
        // aca debe de imprimr cada opcion
        System.out.println(total);
        
        int opcion=sc.nextInt();
        return opcion;
    }

    /**
     * Método opcionMenu. Este método opera de acuerdo a la opción digitada. En él
     * se instancian los objetos de nuestro sistema y se invocan los métodos con
     * fines específicos.
     */
    public void opcionMenu(int opcii) {
        while (opcii > 0) {
            switch (opcii) {
                case 0:
                    System.out.println("Gracias por usar el programa, hasta la proxima");
                    System.exit(0);
                    break;

                case 1:
                    try {
                        System.out.println("Ingresar nombre del archivo txt a leer: ");
                        String name = sc.next();
                        cd.LecturaArchivo(name);
                    } catch (FileNotFoundException e) {
                        System.out.println("El archivo buscado no existe " + e.getMessage());
                    }                   
                    break;
                    
                case 2:
                    System.out.println(total);
                    break;

                    case 3:
                System.out.println(total);
                break;
                    
                default:
                    System.out.println("El numero digitado no está entre las opciones, intentar de nuevo");
                    break;
            }
            opcii = sc.nextInt();
        }
    }

    /**
     * Método principal. Donde se crea una instancia de tipo menu para poder
     * implementar el programa
     */
    public static void main(String args[]) {
        menu22 m1 = new menu22();
        m1.opcionMenu(m1.menu1());

    }
}
